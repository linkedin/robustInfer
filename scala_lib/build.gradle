plugins {
    id 'scala'
}

group = 'com.linkedin'
version = '0.1.0'

// Version configuration profiles
def versionProfile = findProperty("versionProfile") ?: "spark34"

def versionProfiles = [
    "spark31": [
        spark: "3.1.3",
        scala: "2.12",
        breeze: "1.3"
    ],
    "spark34": [
        spark: "3.4.1", 
        scala: "2.12",
        breeze: "2.1.0"
    ],
    "spark35": [
        spark: "3.5.0",
        scala: "2.12", 
        breeze: "2.1.0"
    ]
]

def currentProfile = versionProfiles[versionProfile]
def sparkVersion = findProperty("sparkVersion") ?: currentProfile.spark
def scalaVersion = findProperty("scalaVersion") ?: currentProfile.scala
def breezeVersion = findProperty("breezeVersion") ?: currentProfile.breeze

println "Using version profile: $versionProfile"
println "Spark: $sparkVersion, Scala: $scalaVersion, Breeze: $breezeVersion"

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.scala-lang:scala-library:$scalaVersion" // Use scalaVersion variable
    implementation "org.apache.spark:spark-sql_${scalaVersion}:$sparkVersion" // Use sparkVersion and scalaVersion variables
    implementation "org.scalanlp:breeze_${scalaVersion}:$breezeVersion"
    implementation "org.scalanlp:breeze-natives_${scalaVersion}:$breezeVersion"

    testImplementation "org.scalatest:scalatest_$scalaVersion:3.2.16" // Use scalaVersion variable
    testRuntimeOnly "org.scalatestplus:junit-5-9_$scalaVersion:3.2.16.0" // Use scalaVersion variable
    // Spark testing
    testImplementation "org.apache.spark:spark-core_${scalaVersion}:${sparkVersion}"
    testImplementation "org.apache.spark:spark-sql_${scalaVersion}:${sparkVersion}"
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ['-deprecation', '-feature', '-release', '11']
}

tasks.register("printJava") {
  doLast {
    println "java.version: " + System.getProperty("java.version")
    println "java.home:    " + System.getProperty("java.home")
    println "java.vendor:  " + System.getProperty("java.vendor")
  }
}

tasks.withType(Test).configureEach {
  javaLauncher.set(javaToolchains.launcherFor {
    languageVersion = JavaLanguageVersion.of(11)
  })
}

test {
    useJUnitPlatform {
        includeEngines 'scalatest'
    }
    testLogging {
        events "PASSED", "FAILED", "SKIPPED" 
        exceptionFormat "full"
        showStandardStreams = false
    }
    minHeapSize = '2g'
    maxHeapSize = '4g'

    // Fix Spark networking issues
    systemProperty 'spark.driver.bindAddress', '127.0.0.1'
    systemProperty 'spark.driver.host', 'localhost'
    systemProperty 'spark.ui.enabled', 'false'
    systemProperty 'java.net.preferIPv4Stack', 'true'
}
